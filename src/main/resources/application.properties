# Nombre de tu aplicaci\u00f3n Spring Boot (\u00a1d\u00e9jalo as\u00ed!)
spring.application.name=Avicola Lugo's

# --- Configuraci\u00f3n de la base de datos PostgreSQL ---
# Importante: Para el despliegue en Render, Spring Boot usar\u00e1 autom\u00e1ticamente
# la variable de entorno 'DATABASE_URL' que Render provee cuando vinculas
# tu base de datos PostgreSQL.
# Por lo tanto, comentamos las l\u00edneas de conexi\u00f3n directa para evitar conflictos.
# Si necesitas una configuraci\u00f3n local diferente (ej. para desarrollo en tu PC),
# puedes crear un archivo 'application-local.properties' y activarlo con
# spring.profiles.active=local, o descomentar estas l\u00edneas para desarrollo local.

# spring.datasource.url=jdbc:postgresql://dpg-d1i1a8adbo4c73a4uasg-a.oregon-postgres.render.com/avicola_lugo
# spring.datasource.username=leoadmin01
# spring.datasource.password=rcZmC4thVQ0D9Ggo5w9dftXfxXUn3D6q
# spring.datasource.driver-class-name=org.postgresql.Driver

# Esta l\u00ednea le dice a Spring Boot que la URL de la base de datos debe
# tomarse de la variable de entorno 'DATABASE_URL'.
# Render autom\u00e1ticamente establece 'DATABASE_URL' para las bases de datos vinculadas.
spring.datasource.url=${DATABASE_URL}

# Configuraci\u00f3n de JPA y Hibernate (para mapear objetos Java a tablas de BD)
# 'update' es \u00fatil en desarrollo para que Spring cree/actualice tablas autom\u00e1ticamente.
# En producci\u00f3n, se recomienda 'none' o 'validate' y usar migraciones de base de datos (Flyway/Liquibase).
spring.jpa.hibernate.ddl-auto=update

# Muestra las sentencias SQL que Spring ejecuta en la consola
spring.jpa.show-sql=true

# Formatea el SQL para que sea legible
spring.jpa.properties.hibernate.format_sql=true

# Opcional: Especifica el dialecto de Hibernate para PostgreSQL.
# Esto puede ayudar a Hibernate a optimizar las consultas para PostgreSQL.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
