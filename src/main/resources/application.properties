    # Nombre de tu aplicaci\u00f3n Spring Boot (\u00a1d\u00e9jalo as\u00ed!)
    spring.application.name=Avicola Lugo's

    # --- Configuraci\u00f3n de la base de datos PostgreSQL ---
    # La URL completa de la base de datos ser\u00e1 inyectada por Render como una variable de entorno.
    # Por lo tanto, NO la definimos directamente aqu\u00ed.
    # Comentamos las configuraciones locales para evitar conflictos.

    # spring.datasource.url=jdbc:postgresql://dpg-d1i1a8adbo4c73a4uasg-a.oregon-postgres.render.com/avicola_lugo
    # spring.datasource.username=leoadmin01
    # spring.datasource.password=rcZmC4thVQ0D9Ggo5w9dftXfxXUn3D6q
    # spring.datasource.driver-class-name=org.postgresql.Driver

    # Esto asegura que Spring Boot sepa qu\u00e9 driver usar.
    spring.datasource.driver-class-name=org.postgresql.Driver

    # Especificamos el usuario y la contrase\u00f1a de la base de datos.
    spring.datasource.username=leoadmin01
    spring.datasource.password=rcZmC4thVQ0D9Ggo5w9dftXfxXUn3D6q

    # Configuraci\u00f3n de JPA y Hibernate (para mapear objetos Java a tablas de BD)
    spring.jpa.hibernate.ddl-auto=update
    spring.jpa.show-sql=true
    spring.jpa.properties.hibernate.format_sql=true
    spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

    # --- Configuraci\u00f3n del Servidor Web (Puerto) ---
    # Render inyectar\u00e1 el puerto a trav\u00e9s de la variable de entorno PORT.
    # Si PORT no est\u00e1 definido (ej. en desarrollo local), usa 8080.
    server.port=${PORT:8080}

    # --- Configuraci\u00f3n del Pool de Conexiones HikariCP ---
    # Aumenta el tiempo que la aplicaci\u00f3n esperar\u00e1 para establecer una conexi\u00f3n a la base de datos.
    # El valor est\u00e1 en milisegundos. 120000 ms = 2 minutos.
    spring.datasource.hikari.connection-timeout=480000
    